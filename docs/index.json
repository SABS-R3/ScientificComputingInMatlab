[
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_0_introduction/",
	"title": "Course introduction",
	"tags": [],
	"description": "",
	"content": "Chapter 0 Course introduction "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/",
	"title": "Basic introduction to MATLAB",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Basic introduction to MATLAB Warning Chapter under construction. Original course available here.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/",
	"title": "Data and image analysis",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Data and image analysis Warning Chapter under construction. Original course available here.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/",
	"title": "Basic calculus",
	"tags": [],
	"description": "",
	"content": "Chapter 3 Basic calculus Warning Chapter under construction. Original course available here.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/",
	"title": "Linear algebra",
	"tags": [],
	"description": "",
	"content": "Chapter 4 Linear algebra Warning Chapter under construction. Original course available here.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/",
	"title": "Solving ODEs",
	"tags": [],
	"description": "",
	"content": "Chapter 5 Solving ODEs Warning Chapter under construction. Original course available here.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/",
	"title": "Software engineering",
	"tags": [],
	"description": "",
	"content": "Chapter 6 Software engineering Warning Chapter under construction. Original course available here.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Scientific Computing in MATLAB An online course from the DTC at the University of Oxford This is a new version of the existing course, and is still under construction.\nThe existing course is available here: http://www.dtc.ox.ac.uk/online-learning/matlab/\n"
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_0_introduction/01_course_overview/",
	"title": "Course Overview",
	"tags": [],
	"description": "",
	"content": "Welcome to \u0026lsquo;Scientific Computing in MATLAB\u0026rsquo;. We are delighted you have chosen this course and hope it will meet your expectations.\nIn this preliminary unit we shall be looking at:\n communications managing your learning activities.  If you are already familiar with online study, you will be able to skip through these sessions quickly and get onto the real stuff. If you are not, it may answer a few of your questions. If you have any remaining questions contact your tutor who will be happy to help.\nIf you have questions relating to the academic content or learning, please contact your course tutor, who will introduce him-or herself to you via email.\nMathematical prerequisites The course is a mathematically based one and we assume that you have studied mathematics to A level or equivalent. You should be familiar with the ideas of vectors, matrices, differentiation and integration along with basic probability and statistics. There will be reminders of the key mathematical ideas where they are used, along with appropriate references, but we will not be explaining everything from scratch.\nRequired reading There is no required reading for this course, which is relatively self-contained. References are given throughout the course where you can find more information on particular topics, many of which are online resources or help files. There are however certain places where no appropriate online sources are available, so we have given references to appropriate books.\nRequired software For this course you will need access to a computer with the MATLAB software installed. Section 0.3 contains details on how to get MATLAB. If you already have access to MATLAB then you can skip this section.\nUnits This course is divided into six units, each of which is designed to take between a few hours and a few days to cover, depending on your prior programming and mathematics experience. The units are as follows:\n Unit 1: Basic introduction to MATLAB Unit 2: Data analysis, image analysis and basic statistics in MATLAB Unit 3: Basic calculus in MATLAB Unit 4: Linear algebra in MATLAB Unit 5: Solving ODEs in MATLAB Unit 6: Software engineering and scientific computing  Each unit consists of:\n an introduction giving you an outline of the topic covered in the unit and its learning objectives information about the topic you are studying, giving you the context within which your reading should make sense a number of activities, some of which are pen and paper exercises, and the majority of which are MATLAB exercises (and both types contain hints and solutions) recommended resources for further exploration.  Learning expectations Depending on how the course you are taking is structured, you may be working full-time on this course, or only for a few hours a week. You will find that a lot of that time is spent working on the exercises in MATLAB and – we hope – discussing the issues with your fellow students. This will help you to share ideas and experiences and learn from others as you progress through the course.\nIn undertaking this course, you are committing yourself to:\n regularly reading the course materials working through all activities, which is especially important as this is the main mechanism for learning on this course completing the final assignment.  "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/01_introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Learning objectives In this introductory unit you will learn the basics of MATLAB, from how to start MATLAB through to how to use it to write simple code and to use basic graphic capabilities of MATLAB. The aim of this unit is for you to acquire a familiarity with MATLAB and to learn a few basic commands.\nWhen you see things written in typewriter font as in this for example, you should type these commands into the MATLAB command window. his unit consists mostly of walkthroughs which introduce you to the commands that you will use throughout the course; be sure to enter these commands into MATLAB as you go through the walkthroughs. If you come across a command that you don\u0026rsquo;t know, use the inbuilt MATLAB help files (which we will explain how to use below) to find out what it does.\nThis course was developed using MATLAB on Microsoft Windows, but MATLAB is the same regardless of the operating system you are using. Some aspects of the appearance may vary between operating systems, but all functionality should be the same.\nReading list There is no specific reading list for this unit but the following resources may be useful.\n the MATLAB help system (found by typing \u0026lsquo;doc\u0026rsquo; on the command line), which is explained in one of the first screens the online MATLAB documentation The book MATLAB Primer, by Timothy A. Davis and Kermit Sigmon  "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/01_introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/01_introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/01_introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/01_introduction_and_definitions/",
	"title": "Introduction and definitions",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/01_introduction_and_definitions/",
	"title": "Introduction and definitions",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/02_analytical_methods_1st_order/",
	"title": "Analytical methods: 1st order",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_0_introduction/02_course_activities/",
	"title": "Course Activities",
	"tags": [],
	"description": "",
	"content": "The main teaching mechanism on this course is through activities and exercises. Each unit is composed of a number of such activities which will not only introduce the material to you but also enable you to demonstrate your understanding (or to express your lack of understanding – something you should never be afraid to do).\nRegular activities and resources There are several kinds of activity that you will be asked to complete while on this course. Some of these will be ongoing throughout the course, whereas others will relate to the topic of a particular week. Activity types include:\nReading: Doing this lets you explore the content of the course. Usually you will receive guidance about things you should be considering as you do the reading to help you get the most from it.\nIndividual activities: These will help you to consolidate the learning from your reading and further explore the ideas in the course. Much of the work you undertake on your own will feed into your assignments.\nThe activities are broken up into the following two categories:\nWalkthroughs: In each of these, you will be taken through an application of MATLAB. You should type all commands given into the MATLAB command window as you work your way through the activity.\nProblems: You will be given a problem to solve using MATLAB (and, very occasionally, pen and paper). This will require the creation of a figure or the development of an appropriate MATLAB function. Hints and solutions will be given.\nThe work you do for many of the exercises on this course will be directly useful in the assignment, which will therefore be much less onerous if you have completed the activities as you go along.\nCode and Mathematics Code will be written in typewriter font, this for example, and you should type these commands into the MATLAB command window when you see them, to see what they do.\nLonger code blocks will appear like this:\nb=ones(500,1); tic, x1=A\\b; toc tic, x2=B\\b; toc Mathematics will be presented in maths font, i.e. $\\Psi(\\mathbf{r},t)$, and longer equations may appear on on their own line, such as:\n$$i\\hbar\\frac{\\partial}{\\partial t} \\Psi(\\mathbf{r},t) = \\left [ \\frac{-\\hbar^2}{2\\mu}\\nabla^2 + V(\\mathbf{r},t)\\right ] \\Psi(\\mathbf{r},t).$$\n"
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/02_formatting_code_part_1/",
	"title": "Formatting code: part 1",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/02_numerical_differentiation/",
	"title": "Numerical differentiation",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/02_simple_summary_statistics/",
	"title": "Simple summary statistics",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/02_vectors_and_matrices/",
	"title": "Vectors and matrices",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/02_what_is_matlab/",
	"title": "What is MATLAB?",
	"tags": [],
	"description": "",
	"content": "MATLAB is:\n a calculator; a powerful graphics tool; and a high-level programming language including a large number of mathematical tools.  "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/03_analytical_methods_2nd_order/",
	"title": "Analytical methods: 2nd order",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/03_eigenvalues_and_eigenvectors/",
	"title": "Eigenvalues and eigenvectors",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/03_exercises_1/",
	"title": "Exercises 1",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/03_formatting_code_part_2/",
	"title": "Formatting code: part 2",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_0_introduction/03_getting_matlab/",
	"title": "Getting MATLAB",
	"tags": [],
	"description": "",
	"content": "A pre-requisite for the course is to have the program MATLAB installed on your computer. You will only need the basic version of MATLAB for this course. As you will discover there are many toolboxes are available which extend the functionality of MATLAB but these are not needed for this course. In this section we will get MATLAB set up on your computer.\nChecking for MATLAB If you are using a departmental computer then MATLAB may already have been installed for you. The following will show you if it is installed or not.\nIf you have the following icon on your desktop (or in your start menu) then you already have MATLAB installed: In Linux, try typing matlab into the command line to see if you have MATLAB installed. If it is installed then the MATLAB Command window will open.\nIf MATLAB is installed on your computer then you can ignore the rest of this section. However, if you don\u0026rsquo;t have MATLAB installed on your machine then contact your College or Department\u0026rsquo;s IT support officers and they will be able to help.\nIf you are using a personal computer for this course then there are a few ways of getting MATLAB.\nDownloading MATLAB from inside Oxford University If you are an Oxford University student then MATLAB is available from IT Services under a university-wide student licence, details of which can be found at the following link:\nhttps://help.it.ox.ac.uk/sls/matlab\nYou will need to use your Single Sign-On to get access to MATLAB.\nUsing MATLAB online It is possible to use MATLAB in your web browser by going to:\nhttps://matlab.mathworks.com/\nThis still requires you to have an account with MathWorks, which you can obtain via the University of Oxford by following the instructions above. While using MATLAB in the browser may be sufficient for this course, it is preferable to have MATLAB installed on the machine you will be using. You will get better performance, have access to more features, have have your files stored locally.\nPurchasing MATLAB directly from MathWorks If you don\u0026rsquo;t have an Oxford University Single Sign-On, and your IT support cannot setup MATLAB for you, then you can also purchase MATLAB directly from MathWorks, at https://www.mathworks.com/.\n"
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/03_linear_regression/",
	"title": "Linear regression",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/03_starting_matlab/",
	"title": "Starting MATLAB",
	"tags": [],
	"description": "",
	"content": "Windows  Expand for Windows instructions  In the File Explorer, right-click and select \u0026lsquo;New\u0026rsquo; then \u0026lsquo;Folder\u0026rsquo;, and call this new folder \u0026lsquo;MatlabCourse\u0026rsquo;. To start MATLAB click on the \u0026lsquo;MATLAB\u0026rsquo; icon, and change the \u0026lsquo;Current Directory\u0026rsquo; to the one you just created. You may wish to create some appropriately named sub-directories to store separately the files from each unit of the course, for example \u0026lsquo;Unit1\u0026rsquo;.   macOS  Expand for macOS instructions  In Finder, right-click and select \u0026lsquo;New\u0026rsquo; then \u0026lsquo;Folder\u0026rsquo;, and call this new folder \u0026lsquo;MatlabCourse\u0026rsquo;. To start MATLAB click on the \u0026lsquo;MATLAB\u0026rsquo; icon, and change the \u0026lsquo;Current Directory\u0026rsquo; to the one you just created. You may wish to create some appropriately named sub-directories to store separately the files from each unit of the course, for example \u0026lsquo;Unit1\u0026rsquo;.   Linux  Expand for Linux instructions   Open a terminal and type\nmkdir MatlabCourse cd MatlabCourse to make a directory and switch to it.\n  From within the directory you just created, type\nmatlab \u0026amp; A MATLAB window should now open. Any files created and saved will now be saved within this directory. Note that the \u0026lsquo;\u0026amp;\u0026rsquo; will free the MATLAB window from the terminal; otherwise, if you close the terminal you close MATLAB.\n  You may wish to create some appropriately named sub-directories to store separately the files from each unit of the course, for example \u0026lsquo;Unit1\u0026rsquo;. Note that you can use the mkdir command from within the MATLAB command window.\n   Online  Expand for web browser instructions  Go to https://matlab.mathworks.com/. Log in with your MathWorks account. In the \u0026lsquo;Current Folder\u0026rsquo; panel, right-click and select \u0026lsquo;New\u0026rsquo; then \u0026lsquo;Folder\u0026rsquo;, and call this new folder \u0026lsquo;MatlabCourse\u0026rsquo;. Double-click to enter that folder, which will set it as the current working directory. You may wish to create some appropriately named sub-directories to store separately the files from each unit of the course, for example \u0026lsquo;Unit1\u0026rsquo;.   "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/04_basic_data_and_image_processing/",
	"title": "Basic data and image processing",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/04_formatting_code_part_3/",
	"title": "Formatting code: part 3",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/04_numerical_integration/",
	"title": "Numerical integration",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/04_reducing_higher_order_odes/",
	"title": "Reducing higher order ODEs",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/04_sparse_matrices/",
	"title": "Sparse matrices",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/04_using_matlab_as_a_calculator/",
	"title": "Using MATLAB as a calculator",
	"tags": [],
	"description": "",
	"content": "The first thing we will use MATLAB for is a calculator.\nMATLAB uses the standard computer symbols for addition ('+ !nc'), subtraction ('- !nc'), multiplication ('* !nc') and division ('/ !nc'). Brackets are also used (if required) to indicate which operations are to be performed first.\nFor example, to evaluate $3 + 4\\left(1 + \\frac{6}{3}\\right)$ type the following in the Command Window:\n3+4*(1+6/3) and you get the answer 15. Your Command Window should look just like:\n\u0026gt;\u0026gt; 3+4*(1+6/3) ans = 15 Suppose we wished to set the variable x !nc equal to $3 + 4\\left(1 + \\frac{6}{3}\\right)$. Then we would type\nx=3+4*(1+6/3) and get the answer x = 15 !nc. In long calculations it is often unnecessary for the value of x !nc to be output to the screen. If we wanted to calculate x !nc but not output the answer to the screen we would end the line with a semicolon\nx=3+4*(1+6/3); The value of x !nc may now, if desired, be printed out by typing\nx To evaluate a power we use the \u0026lsquo;^ !nc\u0026rsquo; symbol. For example, to evaluate $3^4 !nc$ type\n3^4 Finally, you can clear the variable x !nc by typing\nclear Now typing\nx shows that the variable x !nc has been deleted:\n\u0026gt;\u0026gt; x Unrecognized function or variable \u0026#39;x\u0026#39;. "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/05_exercises/",
	"title": "Exercises",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/05_exercises_1/",
	"title": "Exercises 1",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/05_exercises_1/",
	"title": "Exercises 1",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/05_exercises_2/",
	"title": "Exercises 2",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/05_guis_part_1/",
	"title": "GUIs: part 1",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/05_using_the_inbuilt_help/",
	"title": "Using the inbuilt help",
	"tags": [],
	"description": "",
	"content": "The help facility within MATLAB is very extensive. You will be using the help files throughout this course to find out what a new function does when you first come across it.\nIf you know the name of the function in which you are interested, you can type help FunctionName.\nFor instance, typing help fft will display\n\u0026gt;\u0026gt; help fft fft Discrete Fourier transform. fft(X) is the discrete Fourier transform (DFT) of vector X. For matrices, the fft operation is applied to each column. For N-D arrays, the fft operation operates on the first non-singleton dimension. ... Instead, you can open the more extensive documentation pages by typing doc FunctionName. For instance, typing doc fft will open the following window:\nThe only real drawback is that you need to know not only that something is there but also what it is called. Fortunately, most of the MATLAB commands have sensible names and there is inbuilt search functionality for the graphical help.\nYou can just load the graphical help browser where you can search for the function you need by typing doc, which brings up the following window:\n"
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/06_guis_part_2/",
	"title": "GUIs: part 2",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/06_numerical_methods/",
	"title": "Numerical methods",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/06_solution_of_nonlinear_equations/",
	"title": "Solution of nonlinear equations",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/06_solving_axb_basic/",
	"title": "Solving $Ax=b$: basic",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/06_vectors_and_matrices_part_1/",
	"title": "Vectors and matrices: part 1",
	"tags": [],
	"description": "",
	"content": " Info The main data structures in MATLAB are vectors and matrices. If you have never heard of these before, then look them up in:\n an A-level textbook, on the Wolfram MathWorld pages, or on Wikipedia  before you continue.\n Vectors Vectors in MATLAB are $n\\times 1$ or $1\\times n$ arrays of numbers.\nWalkthrough Suppose the vector $u$ is given by $u=(1\\;4\\;9)$. This may be entered into MATLAB in either of the following ways:\n  By entering each entry of the matrix individually.\nu(1)=1; u(2)=4; u(3)=9; Note that u(1) !nc corresponds to the first entry of u !nc, etc.\n  By typing the entries inside square brackets separated by spaces:\nu=[1 4 9];   The transpose of u !nc may be printed by typing u'.\nSuppose the vector $v$ is given by: $$v=\\begin{pmatrix}4\\\\5\\\\6\\end{pmatrix}$$\nThis may be entered by typing:\nv = [4;5;6]; Inside the square brackets the semicolon denotes a new row.\nNote Vectors are sometimes referred to as arrays. This may be confusing so always look at the dimensions of the array to check the type.\n The length of a vector v !nc can be found by using the command length(v), which here gives:\n\u0026gt;\u0026gt; length(v) ans = 3 The size of a vector v !nc can be found by using the command size(v), which here gives:\n\u0026gt;\u0026gt; size(v) ans = 3 1 This tells us that v !nc has 3 rows and 1 column, and thus allows us to distinguish it from u !nc, which has 1 row and 3 columns.\nNow look up the commands length and size in the help files:\nhelp length help size Matrices Matrices in MATLAB are $m\\times n$ arrays of numbers.\nWalkthrough Suppose the matrix $A$ is given by: $$A=\\begin{pmatrix}1\u0026amp;2\\\\3\u0026amp;4\\end{pmatrix}$$\nThis may be entered into MATLAB in either of the following ways:\n  By entering each entry of the matrix individually\nA(1,1)=1; A(1,2)=2; A(2,1)=3; A(2,2)=4;   Note The entry $A(i,j)$ corresponds to the entry in row $i$ and column $j$ of the matrix $A$.\n  By typing\nA=[1 2; 3 4];   Note Use of ; !nc inside the square brackets denotes a new row in the matrix.\n The dimensions of a matrix A !nc can be found by using the command size(A), which here gives\n\u0026gt;\u0026gt; size(A) ans = 2 2  Note Running the command length(A) on a matrix A !nc yields the result 2, which is the bigger dimension of the matrix, so if A !nc were a $4\\times 6$ or a $6\\times 4$ matrix, length(A) would yield the answer 6.\n Editing vectors and matrices Walkthrough Editing vectors and matrices can be done by specifying the individual element. For example, to change the value of 2 in the matrix A !nc, above, to 5 we can type\nA(1,2)=5; An alternative method is to double-click on A !nc in the Workspace window. This opens a window containing the contents of the matrix A !nc. Click on the entry in the first row, second column, and change it to 5.\nLooking at parts of matrices Sometimes we may wish to access only certain parts of a matrix or vector. There are a number of inbuilt MATLAB commands to help with this.\nWalkthrough The matrix $$C=\\begin{pmatrix}1\u0026amp;2\u0026amp;3\u0026amp;4\\\\5\u0026amp;6\u0026amp;7\u0026amp;8\\\\9\u0026amp;10\u0026amp;11\u0026amp;12\\end{pmatrix}$$\nmay be entered in MATLAB as\nC=[1 2 3 4; 5 6 7 8; 9 10 11 12]; To view the whole matrix we would type\nC To view the second column we would type\nC(:,2) To view the third row we would type\nC(3,:) To view the first two rows we would type\nC(1:2,:) To view the elements in both the last two rows and the last three columns we would type\nC(2:3,2:4)  Note The following: C(2:end,2:end) would yield the same result.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/07_exercises_1/",
	"title": "Exercises 1",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/07_exercises_2/",
	"title": "Exercises 2",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/07_exercises_3/",
	"title": "Exercises 3",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/07_solving_axb_iterative/",
	"title": "Solving $Ax=b$: iterative",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/07_vectors_and_matrices_part_2/",
	"title": "Vectors and matrices: part 2",
	"tags": [],
	"description": "",
	"content": "Now that we know how to handle matrices and vectors in MATLAB, we will look at how to perform operations on them.\nAddition, subtraction and multiplication of vectors and matrices If two vectors or matrices are of the correct size, then they may be added, subtracted or multiplied using the standard operators + !nc, - !nc and * !nc.\nWalkthrough For example, enter the following vectors and matrices:\nu=[1 2]; v=[3; 4]; A=[1 2; 3 4]; B=[5 6; 7 8]; The following are valid operations:\nu*v v*u A+B A-B A*B A*v u*A (A+B)*v but\nA*u is not. Try entering the above operations in the command line.\nQuestion What do the above operations represent and what is the result: a matrix; a vector; or a scalar?\n Expand for solution  u*v – inner product (dot product) – scalar (1 x 1). v*u – vector outer product – matrix (2 x 2). A+B – matrix addition – matrix (2 x 2). A-B – matrix subtraction – matrix (2 x 2). A*B – matrix multiplication – matrix (2 x 2). A*v – right multiplication of a matrix by a vector – vector (2 x 1). u*A – left multiplication of a matrix by a vector – vector (1 x 2). (A+B)*v – matrix addition and right multiplication – vector (2 x 1).    Question Why is A*u not a valid operation?\n Expand for solution The product A*u would represent right multiplication of a 2 x 2 matrix by a 1 x 2 vector, which is an incompatible matrix multiplication. The appropriate dimensions must agree to use the * !nc operator. Similarly, v*A would also fail.\nAttempting an incompatible matrix multiplication will result in an error like this:\n\u0026gt;\u0026gt; A*u Error using * Incorrect dimensions for matrix multiplication. Check that the number of columns in the first matrix matches the number of rows in the second matrix.    Element-wise operations Often we wish to perform operations on elements of a vector or a matrix. We may, for example, have a vector of numbers and wish to calculate their squares. This is done using the \u0026lsquo;dot\u0026rsquo; command, '.' !nc\nWalkthrough For example, enter the following vectors:\nu=[1 2 3 4]; v=[5 6 7 8]; To calculate the square of all elements of u !nc use the command:\nu.^2 To multiply each element of u !nc by the corresponding element of v !nc use:\nu.*v This also works with matrices, for example:\nA.^2  Note This only works if the sizes of the vectors/matrices are the same. It is good practice to clear your variables once you have finished using them.\n Generating vectors It can be tedious to input vectors by specifying all the entries manually; the following are two methods to define vectors more quickly.\nWalkthrough A row vector x !nc consisting of integers from 1 to 10 inclusive may be generated by typing:\nx=1:10 Furthermore, a row vector x !nc consisting of every odd integer from 1 to 9 inclusive may be generated by typing\nx=1:2:9 The central variable indicates the step size, so\nx=10:-1:1 would yield a row vector consisting of the integers from 1 to 10 inclusive, but in descending order.\nA vector y !nc consisting of 100 points equally spaced between 5 and 15 may be generated by typing\ny=linspace(5,15,100) look up the linspace command in the MATLAB help system.\nSome special matrices and vectors MATLAB has inbuilt commands that can be used to create some simple matrices, which can be adapted using your own code to construct matrices of interest to you. You will see examples of this in later units.\nWalkthrough The 3 x 4 matrix with all entries equal to 0 may be produced using the command\nzeros(3,4) The 5 x 2 matrix with all entries equal to 1 may be produced using the command\nones(5,2) The 4 x 6 matrix with diagonal entries equal to 1 and all other entries equal to 0 is given by\neye(4,6) The 2 x 1 matrix (that is, a column vector of length 2) with entries that are distributed randomly with a uniform distribution on the interval $[0,1]$ is given by\nrand(2,1) The 1 x 3 matrix (that is, a row vector of length 3) with entries uniformly distributed with mean 0 and standard deviation 1 is given by\nrandn(1,3) If the matrix required with any of the commands in this section is square, then the second index is not required, as for example with\nones(4) rand(2) "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/08_complex_numbers/",
	"title": "Complex numbers",
	"tags": [],
	"description": "",
	"content": " Info MATLAB can also handle complex numbers. If you have never heard of these before, then look them up in:\n an A-level textbook, on the Wolfram MathWorld pages, or on Wikipedia  before you continue.\n Walkthrough Complex numbers may be entered as, for example,\nz=3+4i The real part, imaginary part, magnitude, argument (in radians) and complex conjugate of z may be evaluated using the following commands:\nreal(z) imag(z) abs(z) angle(z) conj(z)  Question Question: What are the results of the above operations?\n Expand for solution  real(z) = 3. imag(z) = 4. abs(z) = 5. angle(z) = 0.9273. conj(z) = 3-4i.    "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/08_exercises_2/",
	"title": "Exercises 2",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/08_fourier_series/",
	"title": "Fourier series",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/08_initial_value_problems/",
	"title": "Initial value problems",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/08_making_movies_in_matlab/",
	"title": "Making movies in MATLAB",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/09_exercises_3/",
	"title": "Exercises 3",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/09_exercises_4/",
	"title": "Exercises 4",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/09_simple_m_files_scripts/",
	"title": "Simple M-files: scripts",
	"tags": [],
	"description": "",
	"content": "Instead of typing the commands into the Command Window, they may be typed into a file with a .m !nc extension, which allows commands to be built up into a high-level computer program.\nInfo Most of the time when you use MATLAB, you will write scripts, which are just text files with a .m !nc extension, rather than typing commands directly into the Command Window.\n Opening a new M-file From the \u0026lsquo;Home\u0026rsquo; tab, click \u0026lsquo;New Script\u0026rsquo;, or, from the \u0026lsquo;Editor\u0026rsquo; tab, select \u0026lsquo;New\u0026rsquo; and then \u0026lsquo;Script\u0026rsquo;.\nThis will open a new window that is a text editor. You can also type the following command in the Command Window:\nedit to open the MATLAB editor.\nWriting an M-file In a MATLAB script, you can type exactly the commands that you type into the Command Window, but you can write and run multiple commands at once. In the text editor type the following lines of code:\nA=[1 2; 3 4] B=[5 6; 7 8] C=A+B Click on the \u0026lsquo;Save\u0026rsquo; button on the toolbar and save the file as\nmymfile.m Running the M-file Return to the Command Window and type\nmymfile This has the same output as if you had entered the three lines of the M-file in the Command Window.\nWarning You must make sure not to name your file the same as a pre-existing MATLAB function. You can use the exist command (see doc exist) to find out if your function name is being used for an existing function.\n Breaking code across multiple lines While writing M-files you will often have to write long lines of code like:\nA=2*eye(500)-diag(ones(499,1),1)-diag(ones(499,1),-1); In order to make it easier to see what the code is doing and to prevent artificial line breaks (where the editor decides where to break the code across multiple lines) you can use the following:\nA=2*eye(500) ... ; -diag(ones(499,1),1) ... ; -diag(ones(499,1),-1); The dots ... !nc indicate that we wish to continue the current line of code on the next line of the file, when you run the file it is as if all the commands are on the same line.\nComments If you are writing lots of different M-files it is handy to insert comments into the code. Anything in the M-file preceded by a % !nc will be ignored when the M-file is executed. For example, the following code runs exactly the same commands as the mymfile.m file we created earlier.\n%%% Code to add two matrices together %%% A=[1 2; 3 4] % the first matrix B=[5 6; 7 8] % the second matrix % The sum of the two matrices C=A+B "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/09_speeding_up_code_part_1/",
	"title": "Speeding up code: part 1",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/10_boundary_value_problems/",
	"title": "Boundary value problems",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/10_flow_control/",
	"title": "Flow control",
	"tags": [],
	"description": "",
	"content": "For loops If a collection of statements need to be executed a fixed number of times, a for loop may be used.\nWalkthrough For example, the following commands print out the integers between 1 and 10 inclusive:\nfor i=1:10 i end While loops If a collection of statements need to be executed until a stopping criteria is reached a while loop may be used.\nWalkthrough For example the following commands print out the integers between 1 and 10 inclusive:\ni=1; while ( i \u0026lt;= 10 ) i i=i+1; end Operators that may be useful when using while loops are\n == – equal to (note that this is not the same as a single ‘=’ which is used to assign variables) ~= – not equal to \u0026lt; – less than \u0026gt; – greater than \u0026lt;= – less than or equal to \u0026gt;= – greater than or equal to  If statements If a given statement only needs to be executed under a given condition, an if statement may be used.\nWalkthrough For example, the following statements print out the variable x !nc if x !nc is negative:\nif (x\u0026lt;0) x end "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/10_speeding_up_code_part_2/",
	"title": "Speeding up code: part 2",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/11_exercises_2/",
	"title": "Exercises 2",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/11_exercises_4/",
	"title": "Exercises 4",
	"tags": [],
	"description": "",
	"content": " Warning Page under construction.\n "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/11_simple_graphics/",
	"title": "Simple graphics",
	"tags": [],
	"description": "",
	"content": "MATLAB incorporates many powerful graphic tools and can provide visualisations in two or three dimensions, and most books on MATLAB have whole chapters devoted to producing graphics.\nSingle plots We will now go through how to plot a simple function in MATLAB and save the figure to a file you can use in a report.\nWalkthrough To plot the function $sin(x)$ for $x$ between 0 and 10 type:\nfplot(@(x)sin(x),[0 10]) This gives you the following figure on screen:\nTo label the axes and add a title type\nxlabel(\u0026#39;x\u0026#39;) ylabel(\u0026#39;y\u0026#39;) title(\u0026#39;y=sin(x)\u0026#39;) which updates the figure as follows:\nYou can save the figure by clicking on the \u0026lsquo;Save\u0026rsquo; icon in the top left corner of the screen. This will save the figure as a .fig !nc file which can only be opened in MATLAB.\nIf you want to save the file in a format that you can include in a report, select the \u0026lsquo;Save As\u0026rsquo; item in the \u0026lsquo;File\u0026rsquo; menu. You can select the type of file to save as in the \u0026lsquo;Save as type:\u0026rsquo; drop-down menu. The best file type to save the figure as are .eps !nc if you are using LaTeX, a .png !nc or .tiff !nc if you are using something like Microsoft Word, or .svg !nc if you are writing for the web.\nThe figure produced is given below:\nThere are also command line commands such as\nprint ExampleFigure.png –dpng which will print the currently selected figure to the file ExampleFigure.png !nc. The second command –dpng !nc selects the type of file in which the figure will be saved - try doing this now. For more options see\ndoc print To close the figure use the close command.\nMultiple plots You can also include multiple plots in the same figure, using the procedure covered in the following walkthrough.\nWalkthrough To plot two data-sets y1 !nc and y2 !nc against x !nc on the same diagram, use the method shown below.\nx=[1 2 3 4 5 6]; y1=[1 4 9 16 25 36]; y2=[6 5 4 3 2 1]; plot(x,y1, \u0026#39;-\u0026#39;,x,y2,\u0026#39;--\u0026#39;) xlabel(\u0026#39;x\u0026#39;) ylabel(\u0026#39;y\u0026#39; ) legend(\u0026#39;y1\u0026#39;,\u0026#39;y2\u0026#39;,\u0026#39;Location\u0026#39;,\u0026#39;NorthWest\u0026#39;) The statement plot(x,y1,'-',x,y2,'--') tells MATLAB to plot y1 !nc against x !nc as a solid line, and to plot y2 !nc against x !nc as a broken line. Note the use of legend to label the lines and the position of the legend.\nYou could also use the command hold on. To do this see doc hold for examples.\nThe text size on the axes and other properties of the figure can easily be altered. There are a number of options available under \u0026lsquo;View\u0026rsquo; including \u0026lsquo;Plot Edit Toolbar\u0026rsquo; and \u0026lsquo;Figure Palette\u0026rsquo; which bring up a number of options as shown here:\nIt is very important that the axes and labels on a figure are readable when you use the figure in a report, and you can use the plot tools to ensure this. To change the size of the text, just click on the text you wish to resize and you can then edit the font. All other properties of the figure can be changed using the plot tools.\nSubfigures You can also make multiple subplots in the same figure using the subplot command. Look it up now in the help files before continuing.\nWalkthrough To plot $sin(x)$ and $cos(x)$ in separate plots contained in the same figure we use the following commands:\nsubplot(1,2,1); fplot(@(x)sin(x),[0 10]); title(\u0026#39;y=sin(x)\u0026#39;); xlabel(\u0026#39;x\u0026#39;); ylabel(\u0026#39;y\u0026#39;); subplot(1,2,2); fplot(@(x)cos(x),[0 10],\u0026#39;r\u0026#39;); title(\u0026#39;y=cos(x)\u0026#39;); xlabel(\u0026#39;x\u0026#39;); ylabel(\u0026#39;y\u0026#39;); The statement subplot(1,2,1) tells MATLAB to create a grid of 1 by 2 subfigures within the main figure, and the last number indicates in which subfigure to put the next command. You can change these numbers to get a larger number of subfigures. You can add labels and titles to each of these subfigures in the usual way.\nThese commands result in the following figure:\nThe text size on the axes and other properties of the figure can easily be altered by selecting the options from the \u0026lsquo;View\u0026rsquo; menu, as with a single plot.\n"
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/12_plotting_3d_data/",
	"title": "Plotting 3D data",
	"tags": [],
	"description": "",
	"content": "MATLAB can also plot functions and data in 3D. The following commands are used to plot in 3D:\nplot3 surf mesh contour Before you continue, look at the help files for those commands.\nThe following walkthrough is an example of producing a plot of a 3D function.\nWalkthrough First create a mesh on which to plot the surface\nx = linspace(0,20,100); y = linspace(0,10,100); [X,Y] = meshgrid(x,y); Then define a surface by defining a \u0026lsquo;z-value\u0026rsquo; for each point on the mesh:\nZ=sin(X).*sin(Y); To view the surface in 3D use the commands:\nsurf(X,Y,Z) which gives:\nmesh(X,Y,Z) which gives:\ncontour(X,Y,Z) which gives:\nplot3(X,Y,Z) which gives:\nMany of the same tools and commands that worked in 2D plots (legend, title, etc) also work in 3D.\nTo close all figures at once you can use the close all command.\n"
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/13_functions/",
	"title": "Functions",
	"tags": [],
	"description": "",
	"content": "A particularly useful feature of MATLAB is the ability to define functions.\nWalkthrough The syntax for defining the function $y=x^2$ is as follows:\nfunction [y] = xsquared(x) y = x^2;  Info  The [y] !nc indicates the variables that will be returned from the function: there may be multiple, e.g. [y1, y2] !nc. The (x) !nc indicates the parameters that are passed to the function: there may be multiple, e.g. (x1, x2) !nc.   Type these commands into an M-file called xsquared.m and save this file. Now type:\nxsquared(5) and then\nd=7; xsquared(d) Note that MATLAB also allows you to apply functions to arrays. To do this with the power function we modify the above by placing a '.' !nc before the '^' !nc in the above:\nfunction [y] = xsquared(x) y = x.^2; Now type on the command line\ne=[4,5,6]; xsquared(e) "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/14_exercises/",
	"title": "Exercises",
	"tags": [],
	"description": "",
	"content": "The unit closes with a few simple exercises for you to test the skills you have learned throughout the unit.\nQuestion Problem 1: Hint based problem\n Write functions to calculate the maximum and minimum of an array of numbers, without using the commands max !nc or min !nc. Your functions should take in a vector and return values for the maximum and minimum.   Expand for hint Hint The following if !nc statement will find the maximum between max_x !nc and x(i) !nc:\nif x(i)\u0026gt;max_x max_x=x(i); end    Combine the functions from part 1. to make one function that returns both the maximum and the minimum. See doc function for help on how to return multiple values.   Expand for solution Solution   The following code will calculate the maximum of an array passed to it:\nfunction [max_x] = maximum(x) max_x=x(1); for i=1:length(x) if x(i)\u0026gt;max_x max_x=x(i); end end The following code will calculate the minimum of an array passed to it.\nfunction [min_x] = minimum(x) min_x=x(1); for i=1:length(x) if x(i)\u0026lt;min_x min_x=x(i); end end To use these, save the above a .m !nc files with the appropriate names, and run the commands:\nminimum(x) maximum(x) where x !nc is a vector.\n  The following code will calculate the minimum and the maximum of an array passed to it:\nfunction [min_x,max_x] = minmax(x) min_x=x(1); max_x=x(1); for i=1:length(x) if x(i)\u0026lt;min_x min_x=x(i); end if x(i)\u0026gt;max_x max_x=x(i); end end To call the function, save the above as minmax.m !nc, and run:\n[minimum,maximum] = minmax(x)      Question Problem 2: Hint based problem\n Plot the functions $y=x^3$ and $y=x^5$, on the interval $[-2,\\,2]$, on the same graph. Where are the intersections of the curves?   Expand for hint Hint You may want to create the following vectors:\nx=linspace(-2,2,100); y1=x.^3; and use the plot functionality you learned in this unit.\n  Add a title and legend to the graph, label the axes, and save the figure as a .png !nc file.   Expand for solution Solution   Intersections occur at $(x,\\,y)=(−1,\\,−1),(0,\\,0),(1,\\,1)$. The following commands plot the curves:\nx=linspace(-2,2,100); y1=x.^3; y2=x.^5; plot(x,y1,\u0026#39;-\u0026#39;,x,y2,\u0026#39;--\u0026#39;);   The following commands will add a label and legend to the figure:\nlegend(\u0026#39;y=x^3\u0026#39;,\u0026#39;y=x^5\u0026#39;); xlabel(\u0026#39;x\u0026#39;); ylabel(\u0026#39;y\u0026#39;); You can save the file by using \u0026lsquo;Save As\u0026rsquo; in the \u0026lsquo;File\u0026rsquo; menu or by using the following command.\nprint ExampleFigure.png -dpng      "
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://sabs-r3.github.io/ScientificComputingInMatlab/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]