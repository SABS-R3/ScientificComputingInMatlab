<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basic introduction to MATLAB on Scientific Computing in MATLAB</title>
    <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/</link>
    <description>Recent content in Basic introduction to MATLAB on Scientific Computing in MATLAB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 27 Nov 2020 16:10:31 +0000</lastBuildDate><atom:link href="https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/01_introduction/</link>
      <pubDate>Thu, 26 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/01_introduction/</guid>
      <description>Learning objectives In this introductory unit you will learn the basics of MATLAB, from how to start MATLAB through to how to use it to write simple code and to use basic graphic capabilities of MATLAB. The aim of this unit is for you to acquire a familiarity with MATLAB and to learn a few basic commands.
When you see things written in typewriter font as in this for example, you should type these commands into the MATLAB command window.</description>
    </item>
    
    <item>
      <title>What is MATLAB?</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/02_what_is_matlab/</link>
      <pubDate>Wed, 25 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/02_what_is_matlab/</guid>
      <description>MATLAB is:
 a calculator; a powerful graphics tool; and a high-level programming language including a large number of mathematical tools.  </description>
    </item>
    
    <item>
      <title>Starting MATLAB</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/03_starting_matlab/</link>
      <pubDate>Tue, 24 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/03_starting_matlab/</guid>
      <description>Windows  Expand for Windows instructions  In the File Explorer, right-click and select &amp;lsquo;New&amp;rsquo; then &amp;lsquo;Folder&amp;rsquo;, and call this new folder &amp;lsquo;MatlabCourse&amp;rsquo;. To start MATLAB click on the &amp;lsquo;MATLAB&amp;rsquo; icon, and change the &amp;lsquo;Current Directory&amp;rsquo; to the one you just created. You may wish to create some appropriately named sub-directories to store separately the files from each unit of the course, for example &amp;lsquo;Unit1&amp;rsquo;.   macOS  Expand for macOS instructions  In Finder, right-click and select &amp;lsquo;New&amp;rsquo; then &amp;lsquo;Folder&amp;rsquo;, and call this new folder &amp;lsquo;MatlabCourse&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Using MATLAB as a calculator</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/04_using_matlab_as_a_calculator/</link>
      <pubDate>Mon, 23 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/04_using_matlab_as_a_calculator/</guid>
      <description>The first thing we will use MATLAB for is a calculator.
MATLAB uses the standard computer symbols for addition (&#39;+&#39;), subtraction (&#39;-&#39;), multiplication (&#39;*&#39;) and division (&#39;/&#39;). Brackets are also used (if required) to indicate which operations are to be performed first.
For example, to evaluate $3 + 4\left(1 + \frac{6}{3}\right)$ type the following in the Command Window:
3+4*(1+6/3) and you get the answer 15. Your Command Window should look just like:</description>
    </item>
    
    <item>
      <title>Using the inbuilt help</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/05_using_the_inbuilt_help/</link>
      <pubDate>Sun, 22 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/05_using_the_inbuilt_help/</guid>
      <description>The help facility within MATLAB is very extensive. You will be using the help files throughout this course to find out what a new function does when you first come across it.
If you know the name of the function in which you are interested, you can type help FunctionName.
For instance, typing help fft will display
&amp;gt;&amp;gt; help fft fft Discrete Fourier transform. fft(X) is the discrete Fourier transform (DFT) of vector X.</description>
    </item>
    
    <item>
      <title>Vectors and matrices: part 1</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/06_vectors_and_matrices_part_1/</link>
      <pubDate>Sat, 21 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/06_vectors_and_matrices_part_1/</guid>
      <description>Info The main data structures in MATLAB are vectors and matrices. If you have never heard of these before, then look them up in:
 an A-level textbook, on the Wolfram MathWorld pages, or on Wikipedia  before you continue.
 Vectors Vectors in MATLAB are $n\times 1$ or $1\times n$ arrays of numbers.
Walkthrough Suppose the vector $u$ is given by $u=(1\;4\;9)$. This may be entered into MATLAB in either of the following ways:</description>
    </item>
    
    <item>
      <title>Vectors and matrices: part 2</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/07_vectors_and_matrices_part_2/</link>
      <pubDate>Fri, 20 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/07_vectors_and_matrices_part_2/</guid>
      <description>Now that we know how to handle matrices and vectors in MATLAB, we will look at how to perform operations on them.
Addition, subtraction and multiplication of vectors and matrices If two vectors or matrices are of the correct size, then they may be added, subtracted or multiplied using the standard operators +, - and *.
Walkthrough For example, enter the following vectors and matrices:
u=[1 2]; v=[3; 4]; A=[1 2; 3 4]; B=[5 6; 7 8]; The following are valid operations:</description>
    </item>
    
    <item>
      <title>Complex numbers</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/08_complex_numbers/</link>
      <pubDate>Thu, 19 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/08_complex_numbers/</guid>
      <description>Info MATLAB can also handle complex numbers. If you have never heard of these before, then look them up in:
 an A-level textbook, on the Wolfram MathWorld pages, or on Wikipedia  before you continue.
 Walkthrough Complex numbers may be entered as, for example,
z=3+4i The real part, imaginary part, magnitude, argument (in radians) and complex conjugate of z may be evaluated using the following commands:
real(z) imag(z) abs(z) angle(z) conj(z)  Question Question: What are the results of the above operations?</description>
    </item>
    
    <item>
      <title>Simple M-files: scripts</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/09_simple_m_files_scripts/</link>
      <pubDate>Wed, 18 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/09_simple_m_files_scripts/</guid>
      <description>Instead of typing the commands into the Command Window, they may be typed into a file with a .m extension, which allows commands to be built up into a high-level computer program.
Info Most of the time when you use MATLAB, you will write scripts, which are just text files with a .m extension, rather than typing commands directly into the Command Window.
 Opening a new M-file From the &amp;lsquo;Home&amp;rsquo; tab, click &amp;lsquo;New Script&amp;rsquo;, or, from the &amp;lsquo;Editor&amp;rsquo; tab, select &amp;lsquo;New&amp;rsquo; and then &amp;lsquo;Script&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Flow control</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/10_flow_control/</link>
      <pubDate>Tue, 17 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/10_flow_control/</guid>
      <description>For loops If a collection of statements need to be executed a fixed number of times, a for loop may be used.
Walkthrough For example, the following commands print out the integers between 1 and 10 inclusive:
for i=1:10 i end While loops If a collection of statements need to be executed until a stopping criteria is reached a while loop may be used.
Walkthrough For example the following commands print out the integers between 1 and 10 inclusive:</description>
    </item>
    
    <item>
      <title>Simple graphics</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/11_simple_graphics/</link>
      <pubDate>Mon, 16 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/11_simple_graphics/</guid>
      <description>MATLAB incorporates many powerful graphic tools and can provide visualisations in two or three dimensions, and most books on MATLAB have whole chapters devoted to producing graphics.
Single plots We will now go through how to plot a simple function in MATLAB and save the figure to a file you can use in a report.
Walkthrough To plot the function $\sin(x)$ for $x$ between 0 and 10 type:
fplot(@(x)sin(x),[0 10]) Here, the notation @(x)sin(x) is referred to in MATLAB as an anonymous function.</description>
    </item>
    
    <item>
      <title>Plotting 3D data</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/12_plotting_3d_data/</link>
      <pubDate>Sun, 15 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/12_plotting_3d_data/</guid>
      <description>MATLAB can also plot functions and data in 3D. The following commands are used to plot in 3D:
plot3 surf mesh contour Before you continue, look at the help files for those commands.
The following walkthrough is an example of producing a plot of a 3D function.
Walkthrough First create a mesh on which to plot the surface
x = linspace(0,20,100); y = linspace(0,10,100); [X,Y] = meshgrid(x,y); Then define a surface by defining a &amp;lsquo;z-value&amp;rsquo; for each point on the mesh:</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/13_functions/</link>
      <pubDate>Sat, 14 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/13_functions/</guid>
      <description>A particularly useful feature of MATLAB is the ability to define functions.
Walkthrough The syntax for defining the function $y=x^2$ is as follows:
function [y] = xsquared(x) y = x^2;  Info  The [y] indicates the variables that will be returned from the function: there may be multiple, e.g. [y1, y2]. The (x) indicates the parameters that are passed to the function: there may be multiple, e.g. (x1, x2).   Type these commands into an M-file called xsquared.</description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/14_exercises/</link>
      <pubDate>Fri, 13 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/14_exercises/</guid>
      <description>The unit closes with a few simple exercises for you to test the skills you have learned throughout the unit.
Question Problem 1: Hint based problem
 Write functions to calculate the maximum and minimum of an array of numbers, without using the commands max or min. Your functions should take in a vector and return values for the maximum and minimum.   Expand for hint Hint The following if statement will find the maximum between max_x and x(i):</description>
    </item>
    
  </channel>
</rss>
