<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software engineering on Scientific Computing in MATLAB</title>
    <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/</link>
    <description>Recent content in Software engineering on Scientific Computing in MATLAB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 27 Nov 2020 16:10:31 +0000</lastBuildDate><atom:link href="https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/01_introduction/</link>
      <pubDate>Thu, 26 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/01_introduction/</guid>
      <description>Learning objectives As you will have found out by now, it is important to produce well-structured and efficient code. This unit contains exercises designed to show you how to do this. It is also important to be able to represent the results of your work in the best possible way. In this unit you will therefore also learn how to construct a simple Graphical User Interface (GUI) for your code and how to produce movies in MATLAB to present your results.</description>
    </item>
    
    <item>
      <title>Formatting code: part 1</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/02_formatting_code_part_1/</link>
      <pubDate>Wed, 25 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/02_formatting_code_part_1/</guid>
      <description>This section is based on the https://software-carpentry.org/ course and the article on coding style https://queue.acm.org/detail.cfm?id=1039535. Emphasis has been put on how you use these ideas in MATLAB, however, a lot of the ideas you will see here are applicable in any programming language.
Why we write code The main reasons we write code are:
 to design solutions to problems; to communicate our designs to people; and to get a computer to implement our design.</description>
    </item>
    
    <item>
      <title>Formatting code: part 2</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/03_formatting_code_part_2/</link>
      <pubDate>Tue, 24 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/03_formatting_code_part_2/</guid>
      <description>Comments help to describe the intent of the programmer and document tricky sections of the program. Comments also provide a way of adding metadata, such as physical units. The aim is to describe, rather than duplicate.
For example:
% Initialise voltage to zero voltage = 0.0; just repeats the information in the code, whereas:
% Transmembrane potential (units - mV) voltage = 0.0; provides more important information.
When writing code, it is good practice to use comments first to lay out a skeleton for the code.</description>
    </item>
    
    <item>
      <title>Formatting code: part 3</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/04_formatting_code_part_3/</link>
      <pubDate>Mon, 23 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/04_formatting_code_part_3/</guid>
      <description>Whitespace Whitespace is generally not significant to the computer, but it makes a big difference to code&amp;rsquo;s readability to humans. Take a look at the following examples.
Can(you, tell, at + a, glance, which * of, these, parameters, is(the, eighth), one); This(is, ... much, ... nicer); This=is+almost*(as-annoying); This = is + much * (more - readable); Nested functions You can define functions inside other functions – known as &amp;lsquo;nested&amp;rsquo; functions – which can improve the readability of the code and save you from having to use multiple files.</description>
    </item>
    
    <item>
      <title>GUIs: part 1</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/05_guis_part_1/</link>
      <pubDate>Sun, 22 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/05_guis_part_1/</guid>
      <description>If you are developing code for other people to use, then it is much better to provide the user with an interface rather than having to type commands into MATLAB. Moreover, developing a user interface will also make the code more usable for you and make it easier for you to demonstrate your code to other people.
MATLAB has inbuilt functionality that enables you to create GUIs with a few simple commands.</description>
    </item>
    
    <item>
      <title>GUIs: part 2</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/06_guis_part_2/</link>
      <pubDate>Sat, 21 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/06_guis_part_2/</guid>
      <description>In the previous screens we have created the figure for the GUI and added some controls. We now need to get the GUI to do something. In the command to create the push button we called a function named PlotGUI, which is where the MATLAB code to be controlled by the GUI will go.
The plot function We now define the function PlotGUI which is called by the push button.</description>
    </item>
    
    <item>
      <title>Exercises 1</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/07_exercises_1/</link>
      <pubDate>Fri, 20 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/07_exercises_1/</guid>
      <description>Question Using the GUI provided in the previous section as a guide, create a GUI for the system of differential equations given by:
$$\frac{dN}{dt}=N(1-P)$$ $$\frac{dP}{dt}=P(N-1),$$
with initial conditions $N(0)=\alpha$ and $P(0)=\beta$. If you&amp;rsquo;re interested in the biological background for this problem (which is known as a &amp;lsquo;Predator–Prey system&amp;rsquo;), then see Chapter 3 of Mathematical Biology by J. D. Murray.
Your GUI should plot both the solutions, $N$ and $P$ over time, together with the phase plane (how $P$ varies with $N$).</description>
    </item>
    
    <item>
      <title>Making movies in MATLAB</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/08_making_movies_in_matlab/</link>
      <pubDate>Thu, 19 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/08_making_movies_in_matlab/</guid>
      <description>If you are going to make a presentation then you may want to make a movie that you can include within it. The following example will show how to use the commands
 getframe VideoWriter writeVideo  to make a movie in MATLAB. Before going through the walkthrough look at the help files for the above commands.
Walkthrough Here we are going to make a movie of an oscillating surface.</description>
    </item>
    
    <item>
      <title>Speeding up code: part 1</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/09_speeding_up_code_part_1/</link>
      <pubDate>Wed, 18 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/09_speeding_up_code_part_1/</guid>
      <description>There are various methods for speeding up your code and the Writing Fast MATLAB Code guide contains a lot of useful tips. We now list some examples of the key methods used to speed up MATLAB code: preallocating; vectorising; using inbuilt functions; and using sparse matrices.
Preallocating Most of your calculations in MATLAB have involved manipulations of matrices and vectors, which can slow code down immensely if not used correctly. The following walkthrough will show you how to avoid these problems.</description>
    </item>
    
    <item>
      <title>Speeding up code: part 2</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/10_speeding_up_code_part_2/</link>
      <pubDate>Tue, 17 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/10_speeding_up_code_part_2/</guid>
      <description>Even if you have tried all the standard methods of improving your code, there are specific tools in MATLAB to help you to identify bottlenecks. The main one of these tools is the profiler.
MATLAB profiler Often the best way to develop code is to develop a prototype that has the required functionality, and then to speed up this prototype while maintaining that functionality. A profiler is a tool that identifies how much time is spent executing each line of the code, which enables us to find problem areas and use the methods of improvement described above to speed it up.</description>
    </item>
    
    <item>
      <title>Exercises 2</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/11_exercises_2/</link>
      <pubDate>Mon, 16 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/11_exercises_2/</guid>
      <description>Consider the partial differential equation $$\frac{\partial u}{\partial t} = \frac{\partial^2 u}{\partial x^2},\qquad\mbox{for}\qquad 0&amp;lt;x&amp;lt;1,\quad 0&amp;lt;t&amp;lt;0.2,$$
with boundary conditions $u(0,t) = u(1,t)=0$ and initial condition $u(x,0)=\sin(\pi x)$. This is the &amp;lsquo;Unsteady Heat Equation&amp;rsquo;, whose exact solution is given by $$u(x,t)=\sin(\pi x)\exp(-\pi^2 t).$$
The function HeatEquation.m solves this system using a forward Euler scheme for the temporal derivative and a second-order finite difference formula for the spatial derivative. You are not required to understand the solution method, but more details can be found in Numerical Solution of Partial Differential Equations by K.</description>
    </item>
    
  </channel>
</rss>
