<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scientific Computing in MATLAB</title>
    <link>https://sabs-r3.github.io/ScientificComputingInMatlab/</link>
    <description>Recent content on Scientific Computing in MATLAB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 27 Nov 2020 16:10:31 +0000</lastBuildDate><atom:link href="https://sabs-r3.github.io/ScientificComputingInMatlab/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Course Overview</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_0_introduction/01_course_overview/</link>
      <pubDate>Thu, 26 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_0_introduction/01_course_overview/</guid>
      <description>Welcome to &amp;lsquo;Scientific Computing in MATLAB&amp;rsquo;. We are delighted you have chosen this course and hope it will meet your expectations.
In this preliminary unit we shall be looking at:
 communications managing your learning activities.  If you are already familiar with online study, you will be able to skip through these sessions quickly and get onto the real stuff. If you are not, it may answer a few of your questions.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/01_introduction/</link>
      <pubDate>Thu, 26 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/01_introduction/</guid>
      <description>Learning objectives In this introductory unit you will learn the basics of MATLAB, from how to start MATLAB through to how to use it to write simple code and to use basic graphic capabilities of MATLAB. The aim of this unit is for you to acquire a familiarity with MATLAB and to learn a few basic commands.
When you see things written in typewriter font as in this for example, you should type these commands into the MATLAB command window.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/01_introduction/</link>
      <pubDate>Thu, 26 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/01_introduction/</guid>
      <description>Learning objectives Data analysis and statistics are the cornerstones of most quantitative disciplines. MATLAB has many inbuilt commands for calculating statistics from large data-sets. In this unit we will look at some of MATLAB’s inbuilt statistical commands and also use MATLAB to perform some common data analysis techniques. By the end of the unit you should be able to perform simple statistical analyses on data-sets and have gained an understanding of how to use MATLAB to generate various types of random samples.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/01_introduction/</link>
      <pubDate>Thu, 26 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/01_introduction/</guid>
      <description>Learning objectives The solution of systems of linear equations forms the basis of many techniques in applied mathematics and statistics, so numerical linear algebra forms perhaps the most important set of tools in scientific programming. MATLAB has been developed specifically to handle matrix and vector operations (hence its name – a portmanteau of &amp;lsquo;matrix&amp;rsquo; and &amp;lsquo;laboratory&amp;rsquo;). It has some particularly efficient and effective inbuilt commands to enable the easy manipulation of matrices and vectors, and very straightforward solutions of linear systems (and hence of nonlinear systems).</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/01_introduction/</link>
      <pubDate>Thu, 26 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/01_introduction/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Introduction and definitions</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/01_introduction_and_definitions/</link>
      <pubDate>Thu, 26 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/01_introduction_and_definitions/</guid>
      <description>Learning objectives The purpose of this unit is to use MATLAB to carry out many of the analytical mathematical techniques that you know. We will look at traditional methods of numerical differentiation and integration as well as root-finding algorithms. Also included is a section on Fourier series which allow discontinuous functions to be approximated by sums of continuous functions. The aim of the unit is to show you how to use MATLAB to undertake all these operations and also to give you practice in creating MATLAB functions.</description>
    </item>
    
    <item>
      <title>Introduction and definitions</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/01_introduction_and_definitions/</link>
      <pubDate>Thu, 26 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/01_introduction_and_definitions/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Analytical methods: 1st order</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/02_analytical_methods_1st_order/</link>
      <pubDate>Wed, 25 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/02_analytical_methods_1st_order/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Course Activities</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_0_introduction/02_course_activities/</link>
      <pubDate>Wed, 25 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_0_introduction/02_course_activities/</guid>
      <description>The main teaching mechanism on this course is through activities and exercises. Each unit is composed of a number of such activities which will not only introduce the material to you but also enable you to demonstrate your understanding (or to express your lack of understanding – something you should never be afraid to do).
Regular activities and resources There are several kinds of activity that you will be asked to complete while on this course.</description>
    </item>
    
    <item>
      <title>Formatting code: part 1</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/02_formatting_code_part_1/</link>
      <pubDate>Wed, 25 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/02_formatting_code_part_1/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Numerical differentiation</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/02_numerical_differentiation/</link>
      <pubDate>Wed, 25 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/02_numerical_differentiation/</guid>
      <description>You should already be familiar with the idea of analytical differentiation and be able to differentiate simple functions like $y=x^n$ and $y=sin(x)$. If you don’t know how to do this, look it up now in any A level textbook or the relevant section of the Calculus Wikibook.
Sometimes functions are highly non-linear and a closed form for the derivative may be difficult to calculate. For example
$$y=x^{\ln x}$$
Alternatively, $y$ can be defined as the solution to an equation, so we can not calculate a closed form for $y=f(x)$ to which the traditional rules of differentiation may be applied.</description>
    </item>
    
    <item>
      <title>Simple summary statistics</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/02_simple_summary_statistics/</link>
      <pubDate>Wed, 25 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/02_simple_summary_statistics/</guid>
      <description>Useful MATLAB commands There are many inbuilt MATLAB commands for calculating statistical properties of data. Some of them are listed below:
 max - returns the maximum value of an array. min – returns the minimum value of an array. mean – returns the mean (average) value of the array. median – returns the median value of an array. mode – returns the mode value of an array. std – returns the standard deviation of an array.</description>
    </item>
    
    <item>
      <title>Vectors and matrices</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/02_vectors_and_matrices/</link>
      <pubDate>Wed, 25 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/02_vectors_and_matrices/</guid>
      <description>The following walkthrough exercises contain a number of activities designed to teach you the basics of using MATLAB for working with vectors and matrices.
Basic vector and matrix manipulation You have already learned many basic matrix manipulation commands in the first unit. This walkthrough provides a quick review of this material with a few new commands added.
Walkthrough Let
x=[1,2,3] y=[2,4,6]&amp;#39; z=[2;4;6] Enter the following commands on the command line and make sure you understand what they do.</description>
    </item>
    
    <item>
      <title>What is MATLAB?</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/02_what_is_matlab/</link>
      <pubDate>Wed, 25 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/02_what_is_matlab/</guid>
      <description>MATLAB is:
 a calculator; a powerful graphics tool; and a high-level programming language including a large number of mathematical tools.  </description>
    </item>
    
    <item>
      <title>Analytical methods: 2nd order</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/03_analytical_methods_2nd_order/</link>
      <pubDate>Tue, 24 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/03_analytical_methods_2nd_order/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Eigenvalues and eigenvectors</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/03_eigenvalues_and_eigenvectors/</link>
      <pubDate>Tue, 24 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/03_eigenvalues_and_eigenvectors/</guid>
      <description>Key properties of square matrices are their eigenvalues and eigenvectors, which enable them to be written in a simpler form, through a process known as eigenvalue decomposition. This is useful for performing mathematical and numerical analysis of matrices in order to identify their key features. A similar process is available for non-square matrices, known as singular value decomposition (SVD). (Note that SVD also exists for square matrices.) There are inbuilt tools within MATLAB that may be used to perform both of these decompositions.</description>
    </item>
    
    <item>
      <title>Exercises 1</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/03_exercises_1/</link>
      <pubDate>Tue, 24 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/03_exercises_1/</guid>
      <description>This set of exercises is designed to give you a familiarity with numerical differentiation. Hints and solutions are available.
Question Do the following problem with pen and paper. Using the Taylor series expansion of the form: $$y(t)=y(a)+(t−a)y&#39;(a)+(t−a)^2y&#39;&#39;(a)+(t−a)^3\frac{y&#39;&#39;&#39;(a)}{3!}+\ldots$$
 Derive the forward difference formula, $$\frac{dy}{dx}\approx\frac{y_{i+1}−y_i}{h}$$ Derive the backward difference formula, $$\frac{dy}{dx}\approx\frac{y_i−y_{i−1}}{h}$$ Derive the central difference formula, $$\frac{dy}{dx}\approx\frac{y_{i+1}−y_{i−1}}{2h}$$ Optional: If you are feeling adventurous derive the second derivative approximation, $$\frac{d^2y}{dx^2}\approx\frac{y_{i+1}−2y_i+y_{i−1}}{h^2}$$  Hint: you will need to include more terms in your Taylor expansion.</description>
    </item>
    
    <item>
      <title>Formatting code: part 2</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/03_formatting_code_part_2/</link>
      <pubDate>Tue, 24 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/03_formatting_code_part_2/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Getting MATLAB</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_0_introduction/03_getting_matlab/</link>
      <pubDate>Tue, 24 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_0_introduction/03_getting_matlab/</guid>
      <description>A pre-requisite for the course is to have the program MATLAB installed on your computer. You will only need the basic version of MATLAB for this course. As you will discover there are many toolboxes are available which extend the functionality of MATLAB but these are not needed for this course. In this section we will get MATLAB set up on your computer.
Checking for MATLAB If you are using a departmental computer then MATLAB may already have been installed for you.</description>
    </item>
    
    <item>
      <title>Linear regression</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/03_linear_regression/</link>
      <pubDate>Tue, 24 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/03_linear_regression/</guid>
      <description>When presented with a data-set, one way to analyse the data is to perform linear regression. The most common form of linear regression is known as ‘least squares fitting’, whose aim is to fit a polynomial curve to the data such that the sum of the squares of the distance from the data points to the line is minimised.
Info If you have never come across this before then look it up.</description>
    </item>
    
    <item>
      <title>Starting MATLAB</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/03_starting_matlab/</link>
      <pubDate>Tue, 24 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/03_starting_matlab/</guid>
      <description>Windows  Expand for Windows instructions  In the File Explorer, right-click and select &amp;lsquo;New&amp;rsquo; then &amp;lsquo;Folder&amp;rsquo;, and call this new folder &amp;lsquo;MatlabCourse&amp;rsquo;. To start MATLAB click on the &amp;lsquo;MATLAB&amp;rsquo; icon, and change the &amp;lsquo;Current Directory&amp;rsquo; to the one you just created. You may wish to create some appropriately named sub-directories to store separately the files from each unit of the course, for example &amp;lsquo;Unit1&amp;rsquo;.   macOS  Expand for macOS instructions  In Finder, right-click and select &amp;lsquo;New&amp;rsquo; then &amp;lsquo;Folder&amp;rsquo;, and call this new folder &amp;lsquo;MatlabCourse&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Basic data and image processing</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/04_basic_data_and_image_processing/</link>
      <pubDate>Mon, 23 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/04_basic_data_and_image_processing/</guid>
      <description>MATLAB has many powerful tools to read in files and manipulate data, and we will use this functionality here to read in some data and image files to undertake some basic processing.
There are many MATLAB commands that are used to read in data from files and write data to files, for example
 load save imread imwrite  Info Before you continue, take a look at the help files for these commands.</description>
    </item>
    
    <item>
      <title>Formatting code: part 3</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/04_formatting_code_part_3/</link>
      <pubDate>Mon, 23 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/04_formatting_code_part_3/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Numerical integration</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/04_numerical_integration/</link>
      <pubDate>Mon, 23 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/04_numerical_integration/</guid>
      <description>You should already be familiar with analytic integration, as both the inverse of differentiation and a means of finding the area under a curve. If you are unsure about this, look it up now in any A level textbook or the relevant section of the Calculus Wikibook.
For most functions that you will come across in mathematical modelling, it will not be possible to undertake the integration analytically, and you will have to resort to numerical methods.</description>
    </item>
    
    <item>
      <title>Reducing higher order ODEs</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/04_reducing_higher_order_odes/</link>
      <pubDate>Mon, 23 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/04_reducing_higher_order_odes/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Sparse matrices</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/04_sparse_matrices/</link>
      <pubDate>Mon, 23 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/04_sparse_matrices/</guid>
      <description>The numerical solution of differential equations often results in what is known as a &amp;lsquo;sparse linear&amp;rsquo; system. A matrix is &amp;lsquo;sparse&amp;rsquo; if most of its entries are zero, and most of the MATLAB functions you have used so far have versions that are specially optimised for sparse matrices, which can speed up your code immensely. The details of this speeding-up will be discussed further in the later unit &amp;lsquo;Software engineering&amp;rsquo;, but we introduce sparse matrices here as they will be used in exercises later in this unit.</description>
    </item>
    
    <item>
      <title>Using MATLAB as a calculator</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/04_using_matlab_as_a_calculator/</link>
      <pubDate>Mon, 23 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/04_using_matlab_as_a_calculator/</guid>
      <description>The first thing we will use MATLAB for is a calculator.
MATLAB uses the standard computer symbols for addition (&#39;+ !nc&#39;), subtraction (&#39;- !nc&#39;), multiplication (&#39;* !nc&#39;) and division (&#39;/ !nc&#39;). Brackets are also used (if required) to indicate which operations are to be performed first.
For example, to evaluate $3 + 4\left(1 + \frac{6}{3}\right)$ type the following in the Command Window:
3+4*(1+6/3) and you get the answer 15. Your Command Window should look just like:</description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/05_exercises/</link>
      <pubDate>Sun, 22 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_2_data_and_image_analysis/05_exercises/</guid>
      <description>This unit closes with a few simple exercises for you to test the skills you have learned.
Question   Download the files Data1.txt and Data2.txt to the current working directory and load them into MATLAB.
  Using the statistical tools you learned earlier, try to identify what the data could be from.
   Expand for hint Hint Plot a histogram of the two data-sets and calculate their means and standard deviations.</description>
    </item>
    
    <item>
      <title>Exercises 1</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/05_exercises_1/</link>
      <pubDate>Sun, 22 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/05_exercises_1/</guid>
      <description>The following exercise will allow you to practise what you have learned so far in this unit.
Let $A$ be a sparse symmetric positive definite matrix of dimension $(N-1)^2\times (N-1)^2$ entered in MATLAB (for a given $N$) by the function buildA !nc as follows:
function A=buildA(N) dx=1/N; nvar=(N-1)^2; e1= ones(nvar,1); e2=e1; e2( 1:N-1:nvar)=0; e3=e1; e3(N-1:N-1:nvar)=0; A=spdiags([-e1 4*e1 -e1],-(N-1):N-1:N-1,nvar,nvar)... +spdiags([-e3 -e2], -1: 2 : 1,nvar,nvar); A=A/dx^2; end We will consider manipulation of the matrix $A$, which will be used again in later exercises as the solution to the linear system containing this $A$.</description>
    </item>
    
    <item>
      <title>Exercises 1</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/05_exercises_1/</link>
      <pubDate>Sun, 22 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/05_exercises_1/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Exercises 2</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/05_exercises_2/</link>
      <pubDate>Sun, 22 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/05_exercises_2/</guid>
      <description>This set of exercises is designed to give you familiarity with numerical integration. Hints and solutions are available.
Question Evaluate $\int_{-1}^{1} x^4 \,dx$ using:
  the Trapezium rule with 10 equal-sized intervals,
  Simpson’s rule with 10 equal-sized intervals.
  In each case, how many uniformly sized intervals do you need for the absolute error in the answer to be less than 0.0001?
 Expand for solution Solution The following code calculates the Trapezium rule and Simpson’s rule approximations for $N=10$.</description>
    </item>
    
    <item>
      <title>GUIs: part 1</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/05_guis_part_1/</link>
      <pubDate>Sun, 22 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/05_guis_part_1/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Using the inbuilt help</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/05_using_the_inbuilt_help/</link>
      <pubDate>Sun, 22 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/05_using_the_inbuilt_help/</guid>
      <description>The help facility within MATLAB is very extensive. You will be using the help files throughout this course to find out what a new function does when you first come across it.
If you know the name of the function in which you are interested, you can type help FunctionName.
For instance, typing help fft will display
&amp;gt;&amp;gt; help fft fft Discrete Fourier transform. fft(X) is the discrete Fourier transform (DFT) of vector X.</description>
    </item>
    
    <item>
      <title>GUIs: part 2</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/06_guis_part_2/</link>
      <pubDate>Sat, 21 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/06_guis_part_2/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Numerical methods</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/06_numerical_methods/</link>
      <pubDate>Sat, 21 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/06_numerical_methods/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Solution of nonlinear equations</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/06_solution_of_nonlinear_equations/</link>
      <pubDate>Sat, 21 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/06_solution_of_nonlinear_equations/</guid>
      <description>We very often need to find the zero of a complex non-linear function when working with mathematical modelling problems, perhaps most frequently when we wish to find the value (or values) of $x$ such that two functions, say $f$ and $g$, are equal, that is $f(x)=g(x)$. This problem is equivalent to letting $y(x)=f(x)−g(x)$ and determining the value(s) of $x$ such that $y(x)=0$.
Here we will use the numerical methods of interval bisection and Newton&amp;rsquo;s method (also known as Newton–Raphson) to find the zero of a function.</description>
    </item>
    
    <item>
      <title>Solving $Ax=b$: basic</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/06_solving_axb_basic/</link>
      <pubDate>Sat, 21 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/06_solving_axb_basic/</guid>
      <description>Much of linear algebra is concerned with solving the linear system $Ax=b$. MATLAB has many inbuilt functions to do this, and in this section you will learn how to use them.
The two easiest methods for calculating the solution to $Ax=b$ are to calculate the inverse, using inv or the \ (backslash) operator. The former calculates the inverse explicitly while the latter calculates the solution to $Ax=b$ using an appropriate numerical technique, such as Gaussian elimination.</description>
    </item>
    
    <item>
      <title>Vectors and matrices: part 1</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/06_vectors_and_matrices_part_1/</link>
      <pubDate>Sat, 21 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/06_vectors_and_matrices_part_1/</guid>
      <description>Info The main data structures in MATLAB are vectors and matrices. If you have never heard of these before, then look them up in:
 an A-level textbook, on the Wolfram MathWorld pages, or on Wikipedia  before you continue.
 Vectors Vectors in MATLAB are $n\times 1$ or $1\times n$ arrays of numbers.
Walkthrough Suppose the vector $u$ is given by $u=(1\;4\;9)$. This may be entered into MATLAB in either of the following ways:</description>
    </item>
    
    <item>
      <title>Exercises 1</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/07_exercises_1/</link>
      <pubDate>Fri, 20 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/07_exercises_1/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Exercises 2</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/07_exercises_2/</link>
      <pubDate>Fri, 20 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/07_exercises_2/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Exercises 3</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/07_exercises_3/</link>
      <pubDate>Fri, 20 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/07_exercises_3/</guid>
      <description>Question Let $f(x) = x^3 - 1 $.
  Use the bisection method on the interval $[−1,10]$ to calculate the root of $f(x)=0$ correct to two decimal places. How many bisections were necessary?
  Use Newton–Raphson with $x_0=10$ to calculate the root of $f(x)=0$ correct to two decimal places. How many iterations were necessary?
   Expand for solution Solution   14 bisections are required for interval bisection:</description>
    </item>
    
    <item>
      <title>Solving $Ax=b$: iterative</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/07_solving_axb_iterative/</link>
      <pubDate>Fri, 20 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/07_solving_axb_iterative/</guid>
      <description>This section is appropriate if you have a background in mathematics and have encountered matrices before. If not then feel free to attempt this section however the material assumes a relatively high level of knowledge of linear algebra.
MATLAB has many inbuilt methods for solving $Ax=b$. Many of these are iterative and suitable for different kinds of matrices. If you have information about the structure of $A$ and know which iterative solver is the best to use (see Linear Algebra and its Applications by Gilbert Strang for details), you can specify the solver in MATLAB.</description>
    </item>
    
    <item>
      <title>Vectors and matrices: part 2</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/07_vectors_and_matrices_part_2/</link>
      <pubDate>Fri, 20 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/07_vectors_and_matrices_part_2/</guid>
      <description>Now that we know how to handle matrices and vectors in MATLAB, we will look at how to perform operations on them.
Addition, subtraction and multiplication of vectors and matrices If two vectors or matrices are of the correct size, then they may be added, subtracted or multiplied using the standard operators + !nc, - !nc and * !nc.
Walkthrough For example, enter the following vectors and matrices:
u=[1 2]; v=[3; 4]; A=[1 2; 3 4]; B=[5 6; 7 8]; The following are valid operations:</description>
    </item>
    
    <item>
      <title>Complex numbers</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/08_complex_numbers/</link>
      <pubDate>Thu, 19 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/08_complex_numbers/</guid>
      <description>Info MATLAB can also handle complex numbers. If you have never heard of these before, then look them up in:
 an A-level textbook, on the Wolfram MathWorld pages, or on Wikipedia  before you continue.
 Walkthrough Complex numbers may be entered as, for example,
z=3+4i The real part, imaginary part, magnitude, argument (in radians) and complex conjugate of z may be evaluated using the following commands:
real(z) imag(z) abs(z) angle(z) conj(z)  Question Question: What are the results of the above operations?</description>
    </item>
    
    <item>
      <title>Exercises 2</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/08_exercises_2/</link>
      <pubDate>Thu, 19 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/08_exercises_2/</guid>
      <description>The following exercise is the final one in the unit and it will allow you to practise using MATLAB to solve linear systems and give you an insight into which methods to use.
Let $A$ be a sparse symmetric positive definite matrix of dimension $(N-1)^2\times (N-1)^2$ defined in buildA.m !nc from the previous question, and let $f$ be the vector of dimension $(N-1)^2$ entered in MATLAB (for a given $N$) by the function:</description>
    </item>
    
    <item>
      <title>Fourier series</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/08_fourier_series/</link>
      <pubDate>Thu, 19 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/08_fourier_series/</guid>
      <description>Fourier series can be used to approximate a general periodic function, even with discontinuities. It does this by using the sum of continuous sine and cosine waves.
Summary of mathematics used The Fourier series of the periodic function $f(x)$ defined on the domain $[−\pi,\pi]$ such that $f(x)+f(x+2\pi)$ is given by:
$$f(x) = \frac{1}{2}a_0 + \sum_{n=1}^{\infty} \left( a_n\cos{nx} + b_n\sin{nx} \right)$$
where
$$a_0 = \frac{1}{\pi}\int_{-\pi}^{\pi}f(x)\,dx$$
and
$$a_n = \frac{1}{\pi}\int_{-\pi}^{\pi}f(x)\cos{nx}\,dx \textrm{, and} \quad b_n = \frac{1}{\pi}\int_{-\pi}^{\pi}f(x)\sin{nx}\,dx \quad \textrm{for}\, n = 1,2,\ldots.</description>
    </item>
    
    <item>
      <title>Initial value problems</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/08_initial_value_problems/</link>
      <pubDate>Thu, 19 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/08_initial_value_problems/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Making movies in MATLAB</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/08_making_movies_in_matlab/</link>
      <pubDate>Thu, 19 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/08_making_movies_in_matlab/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Exercises 3</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/09_exercises_3/</link>
      <pubDate>Wed, 18 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/09_exercises_3/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Exercises 4</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/09_exercises_4/</link>
      <pubDate>Wed, 18 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_3_basic_calculus/09_exercises_4/</guid>
      <description>Question Verify analytically that the Fourier series of a square wave defined as:
$$f(x) = \left\{ \begin{array}{ll} -k &amp;amp; \textrm{if}\quad -\pi&amp;lt;x&amp;lt;0\,, \\ k &amp;amp; \textrm{if}\quad 0&amp;lt;x&amp;lt;\pi\,, \end{array} \right. $$
and
$$f(x+2\pi) = f(x)$$
is
$$\frac{4k}{\pi}\left( \sin{x} + \frac{1}{3}\sin{3x} + \frac{1}{5}\sin{5x} + \ldots \right).$$
 Expand for soluton Solution $$a_0 = \frac{-1}{\pi}\int_{-\pi}^0 k\,dx + \frac{1}{\pi}\int_0^{\pi} k\,dx = 0 $$ $$a_n = \frac{-1}{\pi}\int_{-\pi}^0 k\cos{nx}\,dx + \frac{1}{\pi}\int_0^{\pi} k\cos{nx}\,dx = 0\, , \quad \textrm{for} \quad n=1,2,\ldots $$ and $$b_n = \frac{-1}{\pi}\int_{-\pi}^0 k\sin{nx}\,dx + \frac{1}{\pi}\int_0^{\pi} k\sin{nx}\,dx = \frac{4k}{n\pi}\,, \quad \textrm{for} \quad n=1,3,5,\ldots $$ and</description>
    </item>
    
    <item>
      <title>Simple M-files: scripts</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/09_simple_m_files_scripts/</link>
      <pubDate>Wed, 18 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/09_simple_m_files_scripts/</guid>
      <description>Instead of typing the commands into the Command Window, they may be typed into a file with a .m !nc extension, which allows commands to be built up into a high-level computer program.
Info Most of the time when you use MATLAB, you will write scripts, which are just text files with a .m !nc extension, rather than typing commands directly into the Command Window.
 Opening a new M-file From the &amp;lsquo;Home&amp;rsquo; tab, click &amp;lsquo;New Script&amp;rsquo;, or, from the &amp;lsquo;Editor&amp;rsquo; tab, select &amp;lsquo;New&amp;rsquo; and then &amp;lsquo;Script&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Speeding up code: part 1</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/09_speeding_up_code_part_1/</link>
      <pubDate>Wed, 18 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/09_speeding_up_code_part_1/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Boundary value problems</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/10_boundary_value_problems/</link>
      <pubDate>Tue, 17 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/10_boundary_value_problems/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Flow control</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/10_flow_control/</link>
      <pubDate>Tue, 17 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/10_flow_control/</guid>
      <description>For loops If a collection of statements need to be executed a fixed number of times, a for loop may be used.
Walkthrough For example, the following commands print out the integers between 1 and 10 inclusive:
for i=1:10 i end While loops If a collection of statements need to be executed until a stopping criteria is reached a while loop may be used.
Walkthrough For example the following commands print out the integers between 1 and 10 inclusive:</description>
    </item>
    
    <item>
      <title>Speeding up code: part 2</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/10_speeding_up_code_part_2/</link>
      <pubDate>Tue, 17 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/10_speeding_up_code_part_2/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Exercises 2</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/11_exercises_2/</link>
      <pubDate>Mon, 16 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_6_software_engineering/11_exercises_2/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Exercises 4</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/11_exercises_4/</link>
      <pubDate>Mon, 16 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_5_solving_odes/11_exercises_4/</guid>
      <description> Warning Page under construction.
 </description>
    </item>
    
    <item>
      <title>Simple graphics</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/11_simple_graphics/</link>
      <pubDate>Mon, 16 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/11_simple_graphics/</guid>
      <description>MATLAB incorporates many powerful graphic tools and can provide visualisations in two or three dimensions, and most books on MATLAB have whole chapters devoted to producing graphics.
Single plots We will now go through how to plot a simple function in MATLAB and save the figure to a file you can use in a report.
Walkthrough To plot the function $\sin(x)$ for $x$ between 0 and 10 type:
fplot(@(x)sin(x),[0 10]) Here, the notation @(x)sin(x) !</description>
    </item>
    
    <item>
      <title>Plotting 3D data</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/12_plotting_3d_data/</link>
      <pubDate>Sun, 15 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/12_plotting_3d_data/</guid>
      <description>MATLAB can also plot functions and data in 3D. The following commands are used to plot in 3D:
plot3 surf mesh contour Before you continue, look at the help files for those commands.
The following walkthrough is an example of producing a plot of a 3D function.
Walkthrough First create a mesh on which to plot the surface
x = linspace(0,20,100); y = linspace(0,10,100); [X,Y] = meshgrid(x,y); Then define a surface by defining a &amp;lsquo;z-value&amp;rsquo; for each point on the mesh:</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/13_functions/</link>
      <pubDate>Sat, 14 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/13_functions/</guid>
      <description>A particularly useful feature of MATLAB is the ability to define functions.
Walkthrough The syntax for defining the function $y=x^2$ is as follows:
function [y] = xsquared(x) y = x^2;  Info  The [y] !nc indicates the variables that will be returned from the function: there may be multiple, e.g. [y1, y2] !nc. The (x) !nc indicates the parameters that are passed to the function: there may be multiple, e.</description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/14_exercises/</link>
      <pubDate>Fri, 13 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_1_basic_introduction_to_matlab/14_exercises/</guid>
      <description>The unit closes with a few simple exercises for you to test the skills you have learned throughout the unit.
Question Problem 1: Hint based problem
 Write functions to calculate the maximum and minimum of an array of numbers, without using the commands max !nc or min !nc. Your functions should take in a vector and return values for the maximum and minimum.   Expand for hint Hint The following if !</description>
    </item>
    
  </channel>
</rss>
