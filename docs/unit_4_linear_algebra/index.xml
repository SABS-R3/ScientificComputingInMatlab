<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linear algebra on Scientific Computing in MATLAB</title>
    <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/</link>
    <description>Recent content in Linear algebra on Scientific Computing in MATLAB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 27 Nov 2020 16:10:31 +0000</lastBuildDate><atom:link href="https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/01_introduction/</link>
      <pubDate>Thu, 26 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/01_introduction/</guid>
      <description>Learning objectives The solution of systems of linear equations forms the basis of many techniques in applied mathematics and statistics, so numerical linear algebra forms perhaps the most important set of tools in scientific programming. MATLAB has been developed specifically to handle matrix and vector operations (hence its name â€“ a portmanteau of &amp;lsquo;matrix&amp;rsquo; and &amp;lsquo;laboratory&amp;rsquo;). It has some particularly efficient and effective inbuilt commands to enable the easy manipulation of matrices and vectors, and very straightforward solutions of linear systems (and hence of nonlinear systems).</description>
    </item>
    
    <item>
      <title>Vectors and matrices</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/02_vectors_and_matrices/</link>
      <pubDate>Wed, 25 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/02_vectors_and_matrices/</guid>
      <description>The following walkthrough exercises contain a number of activities designed to teach you the basics of using MATLAB for working with vectors and matrices.
Basic vector and matrix manipulation You have already learned many basic matrix manipulation commands in the first unit. This walkthrough provides a quick review of this material with a few new commands added.
Walkthrough Let
x=[1,2,3] y=[2,4,6]&amp;#39; z=[2;4;6] Enter the following commands on the command line and make sure you understand what they do.</description>
    </item>
    
    <item>
      <title>Eigenvalues and eigenvectors</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/03_eigenvalues_and_eigenvectors/</link>
      <pubDate>Tue, 24 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/03_eigenvalues_and_eigenvectors/</guid>
      <description>Key properties of square matrices are their eigenvalues and eigenvectors, which enable them to be written in a simpler form, through a process known as eigenvalue decomposition. This is useful for performing mathematical and numerical analysis of matrices in order to identify their key features. A similar process is available for non-square matrices, known as singular value decomposition (SVD). (Note that SVD also exists for square matrices.) There are inbuilt tools within MATLAB that may be used to perform both of these decompositions.</description>
    </item>
    
    <item>
      <title>Sparse matrices</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/04_sparse_matrices/</link>
      <pubDate>Mon, 23 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/04_sparse_matrices/</guid>
      <description>The numerical solution of differential equations often results in what is known as a &amp;lsquo;sparse linear&amp;rsquo; system. A matrix is &amp;lsquo;sparse&amp;rsquo; if most of its entries are zero, and most of the MATLAB functions you have used so far have versions that are specially optimised for sparse matrices, which can speed up your code immensely. The details of this speeding-up will be discussed further in the later unit &amp;lsquo;Software engineering&amp;rsquo;, but we introduce sparse matrices here as they will be used in exercises later in this unit.</description>
    </item>
    
    <item>
      <title>Exercises 1</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/05_exercises_1/</link>
      <pubDate>Sun, 22 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/05_exercises_1/</guid>
      <description>The following exercise will allow you to practise what you have learned so far in this unit.
Let $A$ be a sparse symmetric positive definite matrix of dimension $(N-1)^2\times (N-1)^2$ entered in MATLAB (for a given $N$) by the function buildA !nc as follows:
function A=buildA(N) dx=1/N; nvar=(N-1)^2; e1= ones(nvar,1); e2=e1; e2( 1:N-1:nvar)=0; e3=e1; e3(N-1:N-1:nvar)=0; A=spdiags([-e1 4*e1 -e1],-(N-1):N-1:N-1,nvar,nvar)... +spdiags([-e3 -e2], -1: 2 : 1,nvar,nvar); A=A/dx^2; end We will consider manipulation of the matrix $A$, which will be used again in later exercises as the solution to the linear system containing this $A$.</description>
    </item>
    
    <item>
      <title>Solving $Ax=b$: basic</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/06_solving_axb_basic/</link>
      <pubDate>Sat, 21 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/06_solving_axb_basic/</guid>
      <description>Much of linear algebra is concerned with solving the linear system $Ax=b$. MATLAB has many inbuilt functions to do this, and in this section you will learn how to use them.
The two easiest methods for calculating the solution to $Ax=b$ are to calculate the inverse, using inv or the \ (backslash) operator. The former calculates the inverse explicitly while the latter calculates the solution to $Ax=b$ using an appropriate numerical technique, such as Gaussian elimination.</description>
    </item>
    
    <item>
      <title>Solving $Ax=b$: iterative</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/07_solving_axb_iterative/</link>
      <pubDate>Fri, 20 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/07_solving_axb_iterative/</guid>
      <description>This section is appropriate if you have a background in mathematics and have encountered matrices before. If not then feel free to attempt this section however the material assumes a relatively high level of knowledge of linear algebra.
MATLAB has many inbuilt methods for solving $Ax=b$. Many of these are iterative and suitable for different kinds of matrices. If you have information about the structure of $A$ and know which iterative solver is the best to use (see Linear Algebra and its Applications by Gilbert Strang for details), you can specify the solver in MATLAB.</description>
    </item>
    
    <item>
      <title>Exercises 2</title>
      <link>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/08_exercises_2/</link>
      <pubDate>Thu, 19 Nov 2020 16:52:22 +0000</pubDate>
      
      <guid>https://sabs-r3.github.io/ScientificComputingInMatlab/unit_4_linear_algebra/08_exercises_2/</guid>
      <description>The following exercise is the final one in the unit and it will allow you to practise using MATLAB to solve linear systems and give you an insight into which methods to use.
Let $A$ be a sparse symmetric positive definite matrix of dimension $(N-1)^2\times (N-1)^2$ defined in buildA.m !nc from the previous question, and let $f$ be the vector of dimension $(N-1)^2$ entered in MATLAB (for a given $N$) by the function:</description>
    </item>
    
  </channel>
</rss>
